# .github/workflows/deploy.yml
name: Build and Release

on:
  push:
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  test-before-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install fastmcp

    - name: Run tests before deployment
      run: |
        python3 integration_test.py

  build-package:
    needs: test-before-deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools wheel

    - name: Create setup.py
      run: |
        python -c "
import os
setup_content = '''from setuptools import setup, find_packages

with open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:
    long_description = fh.read()

setup(
    name=\"mcp-filesystem-client\",
    version=\"1.0.0\",
    author=\"Your Name\",
    author_email=\"your.email@example.com\",
    description=\"FastMCP client for filesystem operations\",
    long_description=long_description,
    long_description_content_type=\"text/markdown\",
    url=\"https://github.com/YOUR_USERNAME/mcp-filesystem-client\",
    py_modules=[\"fastmcp_client\"],
    classifiers=[
        \"Programming Language :: Python :: 3\",
        \"License :: OSI Approved :: MIT License\",
        \"Operating System :: OS Independent\",
    ],
    python_requires=\">=3.7\",
    install_requires=[
        \"fastmcp\",
    ],
    entry_points={
        \"console_scripts\": [
            \"mcp-client=fastmcp_client:main\",
        ],
    },
)'''
with open('setup.py', 'w') as f:
    f.write(setup_content)
"
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Upload to PyPI (on release)
      if: github.event_name == 'release'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: dist/

  build-docker:
    needs: test-before-deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create requirements.txt
      run: |
        echo "fastmcp" > requirements.txt
    
    - name: Create Dockerfile
      run: |
        python -c "
dockerfile_content = '''FROM python:3.10-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

CMD [\"python3\", \"fastmcp_client.py\", \"interactive\"]
'''
with open('Dockerfile', 'w') as f:
    f.write(dockerfile_content)
"
    
    - name: Build Docker image
      run: |
        docker build -t mcp-filesystem-client .
    
    - name: Test Docker image
      run: |
        docker run --rm mcp-filesystem-client python3 -c "import fastmcp_client; print('âœ… Docker image works')"

    - name: Login to Docker Hub (optional)
      if: github.event_name == 'release'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push to Docker Hub (optional)
      if: github.event_name == 'release'
      run: |
        docker tag mcp-filesystem-client your-dockerhub-username/mcp-filesystem-client:latest
        docker push your-dockerhub-username/mcp-filesystem-client:latest

  create-release-notes:
    needs: [build-package, build-docker]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate release notes
      run: |
        echo "## MCP Filesystem Client Release" > release_notes.md
        echo "" >> release_notes.md
        echo "### Features" >> release_notes.md
        echo "- FastMCP compatible client" >> release_notes.md
        echo "- Async filesystem operations" >> release_notes.md
        echo "- Interactive command-line interface" >> release_notes.md
        echo "- Cross-platform support" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Files" >> release_notes.md
        echo "- \`fastmcp_client.py\` - Main client implementation" >> release_notes.md
        echo "- \`filesystem_server.py\` - FastMCP filesystem server" >> release_notes.md
        echo "- \`integration_test.py\` - Comprehensive test suite" >> release_notes.md

    - name: Upload release notes
      uses: actions/upload-artifact@v3
      with:
        name: release-notes
        path: release_notes.md